var _____WB$wombat$assign$function_____ = function(name) {return (self._wb_wombat && self._wb_wombat.local_init && self._wb_wombat.local_init(name)) || self[name]; };
if (!self.__WB_pmw) { self.__WB_pmw = function(obj) { this.__WB_source = obj; return this; } }
{
  let window = _____WB$wombat$assign$function_____("window");
  let self = _____WB$wombat$assign$function_____("self");
  let document = _____WB$wombat$assign$function_____("document");
  let location = _____WB$wombat$assign$function_____("location");
  let top = _____WB$wombat$assign$function_____("top");
  let parent = _____WB$wombat$assign$function_____("parent");
  let frames = _____WB$wombat$assign$function_____("frames");
  let opener = _____WB$wombat$assign$function_____("opener");

/**
 * Skipped minification because the original files appears to be already minified.
 * Original file: /npm/@lottiefiles/dotlottie-web@0.30.2/dist/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
var JC=Object.defineProperty;var fC=(r,C,i)=>C in r?JC(r,C,{enumerable:!0,configurable:!0,writable:!0,value:i}):r[C]=i;var Z=(r,C,i)=>fC(r,typeof C!="symbol"?C+"":C,i);var _I=class{requestAnimationFrame(C){return requestAnimationFrame(C)}cancelAnimationFrame(C){cancelAnimationFrame(C);}},$I=class{constructor(){Z(this,"_lastHandleId",0);Z(this,"_lastImmediate",null);}requestAnimationFrame(C){return this._lastHandleId>=Number.MAX_SAFE_INTEGER&&(this._lastHandleId=0),this._lastHandleId+=1,this._lastImmediate=setImmediate(()=>{C(Date.now());}),this._lastHandleId}cancelAnimationFrame(C){this._lastImmediate&&clearImmediate(this._lastImmediate);}},VI=class{constructor(){Z(this,"_strategy");this._strategy=typeof requestAnimationFrame=="function"?new _I:new $I;}requestAnimationFrame(C){return this._strategy.requestAnimationFrame(C)}cancelAnimationFrame(C){this._strategy.cancelAnimationFrame(C);}};var M=typeof window<"u"&&typeof window.document<"u";var wI=new Uint8Array([80,75,3,4]),Eg=["v","ip","op","layers","fr","w","h"],qI="0.30.2",Ig="@lottiefiles/dotlottie-web";var TC=(()=>{var r=typeof document<"u"?document.currentScript?.src:void 0;return function(C={}){var i=C,d,B,f=new Promise((I,g)=>{d=I,B=g;}),P=Object.assign({},i),T="./this.program",v="";typeof document<"u"&&document.currentScript&&(v=document.currentScript.src),r&&(v=r),v.startsWith("blob:")?v="":v=v.substr(0,v.replace(/[?#].*/,"").lastIndexOf("/")+1);var $=i.print||console.log.bind(console),q=i.printErr||console.error.bind(console);Object.assign(i,P),P=null,i.thisProgram&&(T=i.thisProgram);var iI;i.wasmBinary&&(iI=i.wasmBinary);var ZI,og=!1,Q,y,II,eI,w,K,ng,ag;function lg(){var I=ZI.buffer;i.HEAP8=Q=new Int8Array(I),i.HEAP16=II=new Int16Array(I),i.HEAPU8=y=new Uint8Array(I),i.HEAPU16=eI=new Uint16Array(I),i.HEAP32=w=new Int32Array(I),i.HEAPU32=K=new Uint32Array(I),i.HEAPF32=ng=new Float32Array(I),i.HEAPF64=ag=new Float64Array(I);}var sg=[],dg=[],cg=[];function Og(){var I=i.preRun.shift();sg.unshift(I);}var j=0,tI=null;function bI(I){throw i.onAbort?.(I),I="Aborted("+I+")",q(I),og=!0,I=new WebAssembly.RuntimeError(I+". Build with -sASSERTIONS for more info."),B(I),I}var Gg=I=>I.startsWith("data:application/octet-stream;base64,"),gI;if(gI="DotLottiePlayer.wasm",!Gg(gI)){var rg=gI;gI=i.locateFile?i.locateFile(rg,v):v+rg;}function hg(I){if(I==gI&&iI)return new Uint8Array(iI);throw "both async and sync fetching of the wasm failed"}function _g(I){return iI||typeof fetch!="function"?Promise.resolve().then(()=>hg(I)):fetch(I,{credentials:"same-origin"}).then(g=>{if(!g.ok)throw `failed to load wasm binary file at '${I}'`;return g.arrayBuffer()}).catch(()=>hg(I))}function Zg(I,g,A){return _g(I).then(e=>WebAssembly.instantiate(e,g)).then(A,e=>{q(`failed to asynchronously prepare wasm: ${e}`),bI(e);})}function $g(I,g){var A=gI;return iI||typeof WebAssembly.instantiateStreaming!="function"||Gg(A)||typeof fetch!="function"?Zg(A,I,g):fetch(A,{credentials:"same-origin"}).then(e=>WebAssembly.instantiateStreaming(e,I).then(g,function(t){return q(`wasm streaming compile failed: ${t}`),q("falling back to ArrayBuffer instantiation"),Zg(A,I,g)}))}var HI=I=>{for(;0<I.length;)I.shift()(i);},bg=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,x=(I,g,A)=>{var e=g+A;for(A=g;I[A]&&!(A>=e);)++A;if(16<A-g&&I.buffer&&bg)return bg.decode(I.subarray(g,A));for(e="";g<A;){var t=I[g++];if(t&128){var o=I[g++]&63;if((t&224)==192)e+=String.fromCharCode((t&31)<<6|o);else {var l=I[g++]&63;t=(t&240)==224?(t&15)<<12|o<<6|l:(t&7)<<18|o<<12|l<<6|I[g++]&63,65536>t?e+=String.fromCharCode(t):(t-=65536,e+=String.fromCharCode(55296|t>>10,56320|t&1023));}}else e+=String.fromCharCode(t);}return e};class qg{constructor(g){this.ya=g-24;}}var ug=0,mg=I=>{for(var g=0,A=0;A<I.length;++A){var e=I.charCodeAt(A);127>=e?g++:2047>=e?g+=2:55296<=e&&57343>=e?(g+=4,++A):g+=3;}return g},Bg=(I,g,A,e)=>{if(0<e){e=A+e-1;for(var t=0;t<I.length;++t){var o=I.charCodeAt(t);if(55296<=o&&57343>=o){var l=I.charCodeAt(++t);o=65536+((o&1023)<<10)|l&1023;}if(127>=o){if(A>=e)break;g[A++]=o;}else {if(2047>=o){if(A+1>=e)break;g[A++]=192|o>>6;}else {if(65535>=o){if(A+2>=e)break;g[A++]=224|o>>12;}else {if(A+3>=e)break;g[A++]=240|o>>18,g[A++]=128|o>>12&63;}g[A++]=128|o>>6&63;}g[A++]=128|o&63;}}g[A]=0;}},uI={},vI=I=>{for(;I.length;){var g=I.pop();I.pop()(g);}};function oI(I){return this.fromWireType(K[I>>2])}var CI={},O={},mI={},nI,U=(I,g,A)=>{function e(a){if(a=A(a),a.length!==I.length)throw new nI("Mismatched type converter count");for(var c=0;c<I.length;++c)k(I[c],a[c]);}I.forEach(function(a){mI[a]=g;});var t=Array(g.length),o=[],l=0;g.forEach((a,c)=>{O.hasOwnProperty(a)?t[c]=O[a]:(o.push(a),CI.hasOwnProperty(a)||(CI[a]=[]),CI[a].push(()=>{t[c]=O[a],++l,l===o.length&&e(t);}));}),o.length===0&&e(t);},pg,V=I=>{for(var g="";y[I];)g+=pg[y[I++]];return g},u;function gC(I,g,A={}){var e=g.name;if(!I)throw new u(`type "${e}" must have a positive integer typeid pointer`);if(O.hasOwnProperty(I)){if(A.ib)return;throw new u(`Cannot register type '${e}' twice`)}O[I]=g,delete mI[I],CI.hasOwnProperty(I)&&(g=CI[I],delete CI[I],g.forEach(t=>t()));}function k(I,g,A={}){if(!("argPackAdvance"in g))throw new TypeError("registerType registeredInstance requires argPackAdvance");return gC(I,g,A)}var kI=I=>{throw new u(I.ma.za.xa.name+" instance already deleted")},FI=!1,Wg=()=>{},Kg=(I,g,A)=>g===A?I:A.Ca===void 0?null:(I=Kg(I,g,A.Ca),I===null?null:A.ab(I)),yg={},aI=[],LI=()=>{for(;aI.length;){var I=aI.pop();I.ma.Ka=!1,I.delete();}},lI,sI={},CC=(I,g)=>{if(g===void 0)throw new u("ptr should not be undefined");for(;I.Ca;)g=I.Na(g),I=I.Ca;return sI[g]},BI=(I,g)=>{if(!g.za||!g.ya)throw new nI("makeClassHandle requires ptr and ptrType");if(!!g.Da!=!!g.Aa)throw new nI("Both smartPtrType and smartPtr must be specified");return g.count={value:1},dI(Object.create(I,{ma:{value:g,writable:!0}}))},dI=I=>typeof FinalizationRegistry>"u"?(dI=g=>g,I):(FI=new FinalizationRegistry(g=>{g=g.ma,--g.count.value,g.count.value===0&&(g.Aa?g.Da.Fa(g.Aa):g.za.xa.Fa(g.ya));}),dI=g=>{var A=g.ma;return A.Aa&&FI.register(g,{ma:A},g),g},Wg=g=>{FI.unregister(g);},dI(I));function pI(){}var cI=(I,g)=>Object.defineProperty(g,"name",{value:I}),Yg=(I,g,A)=>{if(I[g].Ba===void 0){var e=I[g];I[g]=function(...t){if(!I[g].Ba.hasOwnProperty(t.length))throw new u(`Function '${A}' called with an invalid number of arguments (${t.length}) - expects one of (${I[g].Ba})!`);return I[g].Ba[t.length].apply(this,t)},I[g].Ba=[],I[g].Ba[e.Oa]=e;}},NI=(I,g,A)=>{if(i.hasOwnProperty(I)){if(A===void 0||i[I].Ba!==void 0&&i[I].Ba[A]!==void 0)throw new u(`Cannot register public name '${I}' twice`);if(Yg(i,I,I),i.hasOwnProperty(A))throw new u(`Cannot register multiple overloads of a function with the same number of arguments (${A})!`);i[I].Ba[A]=g;}else i[I]=g,A!==void 0&&(i[I].vb=A);},AC=I=>{if(I===void 0)return "_unknown";I=I.replace(/[^a-zA-Z0-9_]/g,"$");var g=I.charCodeAt(0);return 48<=g&&57>=g?`_${I}`:I};function iC(I,g,A,e,t,o,l,a){this.name=I,this.constructor=g,this.La=A,this.Fa=e,this.Ca=t,this.cb=o,this.Na=l,this.ab=a,this.kb=[];}var JI=(I,g,A)=>{for(;g!==A;){if(!g.Na)throw new u(`Expected null or instance of ${A.name}, got an instance of ${g.name}`);I=g.Na(I),g=g.Ca;}return I};function eC(I,g){if(g===null){if(this.Ta)throw new u(`null is not a valid ${this.name}`);return 0}if(!g.ma)throw new u(`Cannot pass "${UI(g)}" as a ${this.name}`);if(!g.ma.ya)throw new u(`Cannot pass deleted object as a pointer of type ${this.name}`);return JI(g.ma.ya,g.ma.za.xa,this.xa)}function tC(I,g){if(g===null){if(this.Ta)throw new u(`null is not a valid ${this.name}`);if(this.Qa){var A=this.Ua();return I!==null&&I.push(this.Fa,A),A}return 0}if(!g||!g.ma)throw new u(`Cannot pass "${UI(g)}" as a ${this.name}`);if(!g.ma.ya)throw new u(`Cannot pass deleted object as a pointer of type ${this.name}`);if(!this.Pa&&g.ma.za.Pa)throw new u(`Cannot convert argument of type ${g.ma.Da?g.ma.Da.name:g.ma.za.name} to parameter type ${this.name}`);if(A=JI(g.ma.ya,g.ma.za.xa,this.xa),this.Qa){if(g.ma.Aa===void 0)throw new u("Passing raw pointer to smart pointer is illegal");switch(this.pb){case 0:if(g.ma.Da===this)A=g.ma.Aa;else throw new u(`Cannot convert argument of type ${g.ma.Da?g.ma.Da.name:g.ma.za.name} to parameter type ${this.name}`);break;case 1:A=g.ma.Aa;break;case 2:if(g.ma.Da===this)A=g.ma.Aa;else {var e=g.clone();A=this.lb(A,KI(()=>e.delete())),I!==null&&I.push(this.Fa,A);}break;default:throw new u("Unsupporting sharing policy")}}return A}function oC(I,g){if(g===null){if(this.Ta)throw new u(`null is not a valid ${this.name}`);return 0}if(!g.ma)throw new u(`Cannot pass "${UI(g)}" as a ${this.name}`);if(!g.ma.ya)throw new u(`Cannot pass deleted object as a pointer of type ${this.name}`);if(g.ma.za.Pa)throw new u(`Cannot convert argument of type ${g.ma.za.name} to parameter type ${this.name}`);return JI(g.ma.ya,g.ma.za.xa,this.xa)}function GI(I,g,A,e,t,o,l,a,c,s,G){this.name=I,this.xa=g,this.Ta=A,this.Pa=e,this.Qa=t,this.jb=o,this.pb=l,this.Za=a,this.Ua=c,this.lb=s,this.Fa=G,t||g.Ca!==void 0?this.toWireType=tC:(this.toWireType=e?eC:oC,this.Ea=null);}var Sg=(I,g,A)=>{if(!i.hasOwnProperty(I))throw new nI("Replacing nonexistent public symbol");i[I].Ba!==void 0&&A!==void 0?i[I].Ba[A]=g:(i[I]=g,i[I].Oa=A);},H,nC=(I,g,A=[])=>(I.includes("j")?(I=I.replace(/p/g,"i"),g=(0, i["dynCall_"+I])(g,...A)):g=H.get(g)(...A),g),aC=(I,g)=>(...A)=>nC(I,g,A),R=(I,g)=>{I=V(I);var A=I.includes("j")?aC(I,g):H.get(g);if(typeof A!="function")throw new u(`unknown function pointer with signature ${I}: ${g}`);return A},Vg,wg=I=>{I=Jg(I);var g=V(I);return E(I),g},WI=(I,g)=>{function A(o){t[o]||O[o]||(mI[o]?mI[o].forEach(A):(e.push(o),t[o]=!0));}var e=[],t={};throw g.forEach(A),new Vg(`${I}: `+e.map(wg).join([", "]))},fI=(I,g)=>{for(var A=[],e=0;e<I;e++)A.push(K[g+4*e>>2]);return A};function lC(I){for(var g=1;g<I.length;++g)if(I[g]!==null&&I[g].Ea===void 0)return !0;return !1}function TI(I,g,A,e,t){var o=g.length;if(2>o)throw new u("argTypes array size mismatch! Must at least get return value and 'this' types!");var l=g[1]!==null&&A!==null,a=lC(g),c=g[0].name!=="void",s=o-2,G=Array(s),m=[],p=[];return cI(I,function(...n){if(n.length!==s)throw new u(`function ${I} called with ${n.length} arguments, expected ${s}`);if(p.length=0,m.length=l?2:1,m[0]=t,l){var h=g[1].toWireType(p,this);m[1]=h;}for(var b=0;b<s;++b)G[b]=g[b+2].toWireType(p,n[b]),m.push(G[b]);if(n=e(...m),a)vI(p);else for(b=l?1:2;b<g.length;b++){var S=b===1?h:G[b-2];g[b].Ea!==null&&g[b].Ea(S);}return h=c?g[0].fromWireType(n):void 0,h})}var Rg=I=>{I=I.trim();let g=I.indexOf("(");return g!==-1?I.substr(0,g):I},DI=[],D=[],EI=I=>{9<I&&--D[I+1]===0&&(D[I]=void 0,DI.push(I));},MI=I=>{if(!I)throw new u("Cannot use deleted val. handle = "+I);return D[I]},KI=I=>{switch(I){case void 0:return 2;case null:return 4;case!0:return 6;case!1:return 8;default:let g=DI.pop()||D.length;return D[g]=I,D[g+1]=1,g}},Xg={name:"emscripten::val",fromWireType:I=>{var g=MI(I);return EI(I),g},toWireType:(I,g)=>KI(g),argPackAdvance:8,readValueFromPointer:oI,Ea:null},sC=(I,g,A)=>{switch(g){case 1:return A?function(e){return this.fromWireType(Q[e])}:function(e){return this.fromWireType(y[e])};case 2:return A?function(e){return this.fromWireType(II[e>>1])}:function(e){return this.fromWireType(eI[e>>1])};case 4:return A?function(e){return this.fromWireType(w[e>>2])}:function(e){return this.fromWireType(K[e>>2])};default:throw new TypeError(`invalid integer width (${g}): ${I}`)}},PI=(I,g)=>{var A=O[I];if(A===void 0)throw I=`${g} has unknown type ${wg(I)}`,new u(I);return A},UI=I=>{if(I===null)return "null";var g=typeof I;return g==="object"||g==="array"||g==="function"?I.toString():""+I},dC=(I,g)=>{switch(g){case 4:return function(A){return this.fromWireType(ng[A>>2])};case 8:return function(A){return this.fromWireType(ag[A>>3])};default:throw new TypeError(`invalid float width (${g}): ${I}`)}},cC=(I,g,A)=>{switch(g){case 1:return A?e=>Q[e]:e=>y[e];case 2:return A?e=>II[e>>1]:e=>eI[e>>1];case 4:return A?e=>w[e>>2]:e=>K[e>>2];default:throw new TypeError(`invalid integer width (${g}): ${I}`)}},Hg=typeof TextDecoder<"u"?new TextDecoder("utf-16le"):void 0,GC=(I,g)=>{for(var A=I>>1,e=A+g/2;!(A>=e)&&eI[A];)++A;if(A<<=1,32<A-I&&Hg)return Hg.decode(y.subarray(I,A));for(A="",e=0;!(e>=g/2);++e){var t=II[I+2*e>>1];if(t==0)break;A+=String.fromCharCode(t);}return A},rC=(I,g,A)=>{if(A??(A=2147483647),2>A)return 0;A-=2;var e=g;A=A<2*I.length?A/2:I.length;for(var t=0;t<A;++t)II[g>>1]=I.charCodeAt(t),g+=2;return II[g>>1]=0,g-e},hC=I=>2*I.length,ZC=(I,g)=>{for(var A=0,e="";!(A>=g/4);){var t=w[I+4*A>>2];if(t==0)break;++A,65536<=t?(t-=65536,e+=String.fromCharCode(55296|t>>10,56320|t&1023)):e+=String.fromCharCode(t);}return e},bC=(I,g,A)=>{if(A??(A=2147483647),4>A)return 0;var e=g;A=e+A-4;for(var t=0;t<I.length;++t){var o=I.charCodeAt(t);if(55296<=o&&57343>=o){var l=I.charCodeAt(++t);o=65536+((o&1023)<<10)|l&1023;}if(w[g>>2]=o,g+=4,g+4>A)break}return w[g>>2]=0,g-e},uC=I=>{for(var g=0,A=0;A<I.length;++A){var e=I.charCodeAt(A);55296<=e&&57343>=e&&++A,g+=4;}return g},zI=[],mC=I=>{var g=zI.length;return zI.push(I),g},BC=(I,g)=>{for(var A=Array(I),e=0;e<I;++e)A[e]=PI(K[g+4*e>>2],"parameter "+e);return A},pC=Reflect.construct,QI={},vg=()=>{if(!jI){var I={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:T||"./this.program"},g;for(g in QI)QI[g]===void 0?delete I[g]:I[g]=QI[g];var A=[];for(g in I)A.push(`${g}=${I[g]}`);jI=A;}return jI},jI,WC=[null,[],[]],KC=()=>{if(typeof crypto=="object"&&typeof crypto.getRandomValues=="function")return I=>crypto.getRandomValues(I);bI("initRandomDevice");},kg=I=>(kg=KC())(I),yI=I=>I%4===0&&(I%100!==0||I%400===0),Fg=[31,29,31,30,31,30,31,31,30,31,30,31],Lg=[31,28,31,30,31,30,31,31,30,31,30,31];function yC(I){var g=Array(mg(I)+1);return Bg(I,g,0,g.length),g}var YC=(I,g,A,e)=>{function t(n,h,b){for(n=typeof n=="number"?n.toString():n||"";n.length<h;)n=b[0]+n;return n}function o(n,h){return t(n,h,"0")}function l(n,h){function b(z){return 0>z?-1:0<z?1:0}var S;return (S=b(n.getFullYear()-h.getFullYear()))===0&&(S=b(n.getMonth()-h.getMonth()))===0&&(S=b(n.getDate()-h.getDate())),S}function a(n){switch(n.getDay()){case 0:return new Date(n.getFullYear()-1,11,29);case 1:return n;case 2:return new Date(n.getFullYear(),0,3);case 3:return new Date(n.getFullYear(),0,2);case 4:return new Date(n.getFullYear(),0,1);case 5:return new Date(n.getFullYear()-1,11,31);case 6:return new Date(n.getFullYear()-1,11,30)}}function c(n){var h=n.Ia;for(n=new Date(new Date(n.Ja+1900,0,1).getTime());0<h;){var b=n.getMonth(),S=(yI(n.getFullYear())?Fg:Lg)[b];if(h>S-n.getDate())h-=S-n.getDate()+1,n.setDate(1),11>b?n.setMonth(b+1):(n.setMonth(0),n.setFullYear(n.getFullYear()+1));else {n.setDate(n.getDate()+h);break}}return b=new Date(n.getFullYear()+1,0,4),h=a(new Date(n.getFullYear(),0,4)),b=a(b),0>=l(h,n)?0>=l(b,n)?n.getFullYear()+1:n.getFullYear():n.getFullYear()-1}var s=K[e+40>>2];e={sb:w[e>>2],rb:w[e+4>>2],Ra:w[e+8>>2],Va:w[e+12>>2],Sa:w[e+16>>2],Ja:w[e+20>>2],Ga:w[e+24>>2],Ia:w[e+28>>2],wb:w[e+32>>2],qb:w[e+36>>2],tb:s&&s?x(y,s):""},A=A?x(y,A):"",s={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var G in s)A=A.replace(new RegExp(G,"g"),s[G]);var m="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),p="January February March April May June July August September October November December".split(" ");s={"%a":n=>m[n.Ga].substring(0,3),"%A":n=>m[n.Ga],"%b":n=>p[n.Sa].substring(0,3),"%B":n=>p[n.Sa],"%C":n=>o((n.Ja+1900)/100|0,2),"%d":n=>o(n.Va,2),"%e":n=>t(n.Va,2," "),"%g":n=>c(n).toString().substring(2),"%G":c,"%H":n=>o(n.Ra,2),"%I":n=>(n=n.Ra,n==0?n=12:12<n&&(n-=12),o(n,2)),"%j":n=>{for(var h=0,b=0;b<=n.Sa-1;h+=(yI(n.Ja+1900)?Fg:Lg)[b++]);return o(n.Va+h,3)},"%m":n=>o(n.Sa+1,2),"%M":n=>o(n.rb,2),"%n":()=>`
`,"%p":n=>0<=n.Ra&&12>n.Ra?"AM":"PM","%S":n=>o(n.sb,2),"%t":()=>"	","%u":n=>n.Ga||7,"%U":n=>o(Math.floor((n.Ia+7-n.Ga)/7),2),"%V":n=>{var h=Math.floor((n.Ia+7-(n.Ga+6)%7)/7);if(2>=(n.Ga+371-n.Ia-2)%7&&h++,h)h==53&&(b=(n.Ga+371-n.Ia)%7,b==4||b==3&&yI(n.Ja)||(h=1));else {h=52;var b=(n.Ga+7-n.Ia-1)%7;(b==4||b==5&&yI(n.Ja%400-1))&&h++;}return o(h,2)},"%w":n=>n.Ga,"%W":n=>o(Math.floor((n.Ia+7-(n.Ga+6)%7)/7),2),"%y":n=>(n.Ja+1900).toString().substring(2),"%Y":n=>n.Ja+1900,"%z":n=>{n=n.qb;var h=0<=n;return n=Math.abs(n)/60,(h?"+":"-")+("0000"+(n/60*100+n%60)).slice(-4)},"%Z":n=>n.tb,"%%":()=>"%"},A=A.replace(/%%/g,"\0\0");for(G in s)A.includes(G)&&(A=A.replace(new RegExp(G,"g"),s[G](e)));return A=A.replace(/\0\0/g,"%"),G=yC(A),G.length>g?0:(Q.set(G,I),G.length-1)};nI=i.InternalError=class extends Error{constructor(I){super(I),this.name="InternalError";}};for(var Ng=Array(256),YI=0;256>YI;++YI)Ng[YI]=String.fromCharCode(YI);pg=Ng,u=i.BindingError=class extends Error{constructor(I){super(I),this.name="BindingError";}},Object.assign(pI.prototype,{isAliasOf:function(I){if(!(this instanceof pI&&I instanceof pI))return !1;var g=this.ma.za.xa,A=this.ma.ya;I.ma=I.ma;var e=I.ma.za.xa;for(I=I.ma.ya;g.Ca;)A=g.Na(A),g=g.Ca;for(;e.Ca;)I=e.Na(I),e=e.Ca;return g===e&&A===I},clone:function(){if(this.ma.ya||kI(this),this.ma.Ma)return this.ma.count.value+=1,this;var I=dI,g=Object,A=g.create,e=Object.getPrototypeOf(this),t=this.ma;return I=I(A.call(g,e,{ma:{value:{count:t.count,Ka:t.Ka,Ma:t.Ma,ya:t.ya,za:t.za,Aa:t.Aa,Da:t.Da}}})),I.ma.count.value+=1,I.ma.Ka=!1,I},delete(){if(this.ma.ya||kI(this),this.ma.Ka&&!this.ma.Ma)throw new u("Object already scheduled for deletion");Wg(this);var I=this.ma;--I.count.value,I.count.value===0&&(I.Aa?I.Da.Fa(I.Aa):I.za.xa.Fa(I.ya)),this.ma.Ma||(this.ma.Aa=void 0,this.ma.ya=void 0);},isDeleted:function(){return !this.ma.ya},deleteLater:function(){if(this.ma.ya||kI(this),this.ma.Ka&&!this.ma.Ma)throw new u("Object already scheduled for deletion");return aI.push(this),aI.length===1&&lI&&lI(LI),this.ma.Ka=!0,this}}),i.getInheritedInstanceCount=()=>Object.keys(sI).length,i.getLiveInheritedInstances=()=>{var I=[],g;for(g in sI)sI.hasOwnProperty(g)&&I.push(sI[g]);return I},i.flushPendingDeletes=LI,i.setDelayFunction=I=>{lI=I,aI.length&&lI&&lI(LI);},Object.assign(GI.prototype,{eb(I){return this.Za&&(I=this.Za(I)),I},Xa(I){this.Fa?.(I);},argPackAdvance:8,readValueFromPointer:oI,fromWireType:function(I){function g(){return this.Qa?BI(this.xa.La,{za:this.jb,ya:A,Da:this,Aa:I}):BI(this.xa.La,{za:this,ya:I})}var A=this.eb(I);if(!A)return this.Xa(I),null;var e=CC(this.xa,A);if(e!==void 0)return e.ma.count.value===0?(e.ma.ya=A,e.ma.Aa=I,e.clone()):(e=e.clone(),this.Xa(I),e);if(e=this.xa.cb(A),e=yg[e],!e)return g.call(this);e=this.Pa?e.$a:e.pointerType;var t=Kg(A,this.xa,e.xa);return t===null?g.call(this):this.Qa?BI(e.xa.La,{za:e,ya:t,Da:this,Aa:I}):BI(e.xa.La,{za:e,ya:t})}}),Vg=i.UnboundTypeError=((I,g)=>{var A=cI(g,function(e){this.name=g,this.message=e,e=Error(e).stack,e!==void 0&&(this.stack=this.toString()+`
`+e.replace(/^Error(:[^\n]*)?\n/,""));});return A.prototype=Object.create(I.prototype),A.prototype.constructor=A,A.prototype.toString=function(){return this.message===void 0?this.name:`${this.name}: ${this.message}`},A})(Error,"UnboundTypeError"),D.push(0,1,void 0,1,null,1,!0,1,!1,1),i.count_emval_handles=()=>D.length/2-5-DI.length;var SC={c:(I,g,A,e)=>{bI(`Assertion failed: ${I?x(y,I):""}, at: `+[g?g?x(y,g):"":"unknown filename",A,e?e?x(y,e):"":"unknown function"]);},m:(I,g,A)=>{var e=new qg(I);throw K[e.ya+16>>2]=0,K[e.ya+4>>2]=g,K[e.ya+8>>2]=A,ug=I,ug},B:function(){return 0},P:()=>{},M:()=>{},R:function(){return 0},N:()=>{},A:function(){},O:()=>{},v:I=>{var g=uI[I];delete uI[I];var A=g.Ua,e=g.Fa,t=g.Ya,o=t.map(l=>l.hb).concat(t.map(l=>l.nb));U([I],o,l=>{var a={};return t.forEach((c,s)=>{var G=l[s],m=c.fb,p=c.gb,n=l[s+t.length],h=c.mb,b=c.ob;a[c.bb]={read:S=>G.fromWireType(m(p,S)),write:(S,z)=>{var X=[];h(b,S,n.toWireType(X,z)),vI(X);}};}),[{name:g.name,fromWireType:c=>{var s={},G;for(G in a)s[G]=a[G].read(c);return e(c),s},toWireType:(c,s)=>{for(var G in a)if(!(G in s))throw new TypeError(`Missing field: "${G}"`);var m=A();for(G in a)a[G].write(m,s[G]);return c!==null&&c.push(e,m),m},argPackAdvance:8,readValueFromPointer:oI,Ea:e}]});},I:()=>{},Y:(I,g,A,e)=>{g=V(g),k(I,{name:g,fromWireType:function(t){return !!t},toWireType:function(t,o){return o?A:e},argPackAdvance:8,readValueFromPointer:function(t){return this.fromWireType(y[t])},Ea:null});},r:(I,g,A,e,t,o,l,a,c,s,G,m,p)=>{G=V(G),o=R(t,o),a&&(a=R(l,a)),s&&(s=R(c,s)),p=R(m,p);var n=AC(G);NI(n,function(){WI(`Cannot construct ${G} due to unbound types`,[e]);}),U([I,g,A],e?[e]:[],h=>{if(h=h[0],e)var b=h.xa,S=b.La;else S=pI.prototype;h=cI(G,function(...OI){if(Object.getPrototypeOf(this)!==z)throw new u("Use 'new' to construct "+G);if(X.Ha===void 0)throw new u(G+" has no accessible constructor");var Dg=X.Ha[OI.length];if(Dg===void 0)throw new u(`Tried to invoke ctor of ${G} with invalid number of parameters (${OI.length}) - expected (${Object.keys(X.Ha).toString()}) parameters instead!`);return Dg.apply(this,OI)});var z=Object.create(S,{constructor:{value:h}});h.prototype=z;var X=new iC(G,h,z,p,b,o,a,s);if(X.Ca){var rI;(rI=X.Ca).Wa??(rI.Wa=[]),X.Ca.Wa.push(X);}return b=new GI(G,X,!0,!1,!1),rI=new GI(G+"*",X,!1,!1,!1),S=new GI(G+" const*",X,!1,!0,!1),yg[I]={pointerType:rI,$a:S},Sg(n,h),[b,rI,S]});},q:(I,g,A,e,t,o)=>{var l=fI(g,A);t=R(e,t),U([],[I],a=>{a=a[0];var c=`constructor ${a.name}`;if(a.xa.Ha===void 0&&(a.xa.Ha=[]),a.xa.Ha[g-1]!==void 0)throw new u(`Cannot register multiple constructors with identical number of parameters (${g-1}) for class '${a.name}'! Overload resolution is currently only performed using the parameter count, not actual type info!`);return a.xa.Ha[g-1]=()=>{WI(`Cannot construct ${a.name} due to unbound types`,l);},U([],l,s=>(s.splice(1,0,null),a.xa.Ha[g-1]=TI(c,s,null,t,o),[])),[]});},f:(I,g,A,e,t,o,l,a)=>{var c=fI(A,e);g=V(g),g=Rg(g),o=R(t,o),U([],[I],s=>{function G(){WI(`Cannot call ${m} due to unbound types`,c);}s=s[0];var m=`${s.name}.${g}`;g.startsWith("@@")&&(g=Symbol[g.substring(2)]),a&&s.xa.kb.push(g);var p=s.xa.La,n=p[g];return n===void 0||n.Ba===void 0&&n.className!==s.name&&n.Oa===A-2?(G.Oa=A-2,G.className=s.name,p[g]=G):(Yg(p,g,m),p[g].Ba[A-2]=G),U([],c,h=>(h=TI(m,h,s,o,l),p[g].Ba===void 0?(h.Oa=A-2,p[g]=h):p[g].Ba[A-2]=h,[])),[]});},X:I=>k(I,Xg),x:(I,g,A,e)=>{function t(){}g=V(g),t.values={},k(I,{name:g,constructor:t,fromWireType:function(o){return this.constructor.values[o]},toWireType:(o,l)=>l.value,argPackAdvance:8,readValueFromPointer:sC(g,A,e),Ea:null}),NI(g,t);},k:(I,g,A)=>{var e=PI(I,"enum");g=V(g),I=e.constructor,e=Object.create(e.constructor.prototype,{value:{value:A},constructor:{value:cI(`${e.name}_${g}`,function(){})}}),I.values[A]=e,I[g]=e;},C:(I,g,A)=>{g=V(g),k(I,{name:g,fromWireType:e=>e,toWireType:(e,t)=>t,argPackAdvance:8,readValueFromPointer:dC(g,A),Ea:null});},E:(I,g,A,e,t,o)=>{var l=fI(g,A);I=V(I),I=Rg(I),t=R(e,t),NI(I,function(){WI(`Cannot call ${I} due to unbound types`,l);},g-1),U([],l,a=>(Sg(I,TI(I,[a[0],null].concat(a.slice(1)),null,t,o),g-1),[]));},l:(I,g,A,e,t)=>{if(g=V(g),t===-1&&(t=4294967295),t=a=>a,e===0){var o=32-8*A;t=a=>a<<o>>>o;}var l=g.includes("unsigned")?function(a,c){return c>>>0}:function(a,c){return c};k(I,{name:g,fromWireType:t,toWireType:l,argPackAdvance:8,readValueFromPointer:cC(g,A,e!==0),Ea:null});},g:(I,g,A)=>{function e(o){return new t(Q.buffer,K[o+4>>2],K[o>>2])}var t=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][g];A=V(A),k(I,{name:A,fromWireType:e,argPackAdvance:8,readValueFromPointer:e},{ib:!0});},w:I=>{k(I,Xg);},ca:(I,g,A,e,t,o,l,a,c,s,G,m)=>{A=V(A),o=R(t,o),a=R(l,a),s=R(c,s),m=R(G,m),U([I],[g],p=>(p=p[0],[new GI(A,p.xa,!1,!1,!0,p,e,o,a,s,m)]));},D:(I,g)=>{g=V(g);var A=g==="std::string";k(I,{name:g,fromWireType:function(e){var t=K[e>>2],o=e+4;if(A)for(var l=o,a=0;a<=t;++a){var c=o+a;if(a==t||y[c]==0){if(l=l?x(y,l,c-l):"",s===void 0)var s=l;else s+="\0",s+=l;l=c+1;}}else {for(s=Array(t),a=0;a<t;++a)s[a]=String.fromCharCode(y[o+a]);s=s.join("");}return E(e),s},toWireType:function(e,t){t instanceof ArrayBuffer&&(t=new Uint8Array(t));var o=typeof t=="string";if(!(o||t instanceof Uint8Array||t instanceof Uint8ClampedArray||t instanceof Int8Array))throw new u("Cannot pass non-string to std::string");var l=A&&o?mg(t):t.length,a=xI(4+l+1),c=a+4;if(K[a>>2]=l,A&&o)Bg(t,y,c,l+1);else if(o)for(o=0;o<l;++o){var s=t.charCodeAt(o);if(255<s)throw E(c),new u("String has UTF-16 code units that do not fit in 8 bits");y[c+o]=s;}else for(o=0;o<l;++o)y[c+o]=t[o];return e!==null&&e.push(E,a),a},argPackAdvance:8,readValueFromPointer:oI,Ea(e){E(e);}});},u:(I,g,A)=>{if(A=V(A),g===2)var e=GC,t=rC,o=hC,l=a=>eI[a>>1];else g===4&&(e=ZC,t=bC,o=uC,l=a=>K[a>>2]);k(I,{name:A,fromWireType:a=>{for(var c=K[a>>2],s,G=a+4,m=0;m<=c;++m){var p=a+4+m*g;(m==c||l(p)==0)&&(G=e(G,p-G),s===void 0?s=G:(s+="\0",s+=G),G=p+g);}return E(a),s},toWireType:(a,c)=>{if(typeof c!="string")throw new u(`Cannot pass non-string to C++ string type ${A}`);var s=o(c),G=xI(4+s+g);return K[G>>2]=s/g,t(c,G+4,s+g),a!==null&&a.push(E,G),G},argPackAdvance:8,readValueFromPointer:oI,Ea(a){E(a);}});},s:(I,g,A,e,t,o)=>{uI[I]={name:V(g),Ua:R(A,e),Fa:R(t,o),Ya:[]};},j:(I,g,A,e,t,o,l,a,c,s)=>{uI[I].Ya.push({bb:V(g),hb:A,fb:R(e,t),gb:o,nb:l,mb:R(a,c),ob:s});},Z:(I,g)=>{g=V(g),k(I,{ub:!0,name:g,argPackAdvance:0,fromWireType:()=>{},toWireType:()=>{}});},J:()=>{throw 1/0},aa:(I,g,A,e)=>(I=zI[I],g=MI(g),I(null,g,A,e)),F:EI,$:(I,g,A)=>{var e=BC(I,g),t=e.shift();I--;var o=Array(I);return g=`methodCaller<(${e.map(l=>l.name).join(", ")}) => ${t.name}>`,mC(cI(g,(l,a,c,s)=>{for(var G=0,m=0;m<I;++m)o[m]=e[m].readValueFromPointer(s+G),G+=e[m].argPackAdvance;return a=A===1?pC(a,o):a.apply(l,o),l=[],a=t.toWireType(l,a),l.length&&(K[c>>2]=KI(l)),a}))},ba:I=>{9<I&&(D[I+1]+=1);},_:I=>{var g=MI(I);vI(g),EI(I);},o:(I,g)=>(I=PI(I,"_emval_take_value"),I=I.readValueFromPointer(g),KI(I)),W:()=>{bI("");},V:()=>performance.now(),L:I=>{var g=y.length;if(I>>>=0,2147483648<I)return !1;for(var A=1;4>=A;A*=2){var e=g*(1+.2/A);e=Math.min(e,I+100663296);var t=Math;e=Math.max(I,e);I:{t=(t.min.call(t,2147483648,e+(65536-e%65536)%65536)-ZI.buffer.byteLength+65535)/65536;try{ZI.grow(t),lg();var o=1;break I}catch{}o=void 0;}if(o)return !0}return !1},S:(I,g)=>{var A=0;return vg().forEach((e,t)=>{var o=g+A;for(t=K[I+4*t>>2]=o,o=0;o<e.length;++o)Q[t++]=e.charCodeAt(o);Q[t]=0,A+=e.length+1;}),0},T:(I,g)=>{var A=vg();K[I>>2]=A.length;var e=0;return A.forEach(t=>e+=t.length+1),K[g>>2]=e,0},t:()=>52,z:()=>52,H:function(){return 70},Q:(I,g,A,e)=>{for(var t=0,o=0;o<A;o++){var l=K[g>>2],a=K[g+4>>2];g+=8;for(var c=0;c<a;c++){var s=y[l+c],G=WC[I];s===0||s===10?((I===1?$:q)(x(G,0)),G.length=0):G.push(s);}t+=a;}return K[e>>2]=t,0},U:(I,g)=>(kg(y.subarray(I,I+g)),0),i:HC,d:XC,e:RC,p:vC,y:LC,b:VC,a:wC,h:FC,n:kC,G:NC,K:(I,g,A,e)=>YC(I,g,A,e)},Y=function(){function I(A){return Y=A.exports,ZI=Y.da,lg(),H=Y.ha,dg.unshift(Y.ea),j--,i.monitorRunDependencies?.(j),j==0&&(tI&&(A=tI,tI=null,A())),Y}var g={a:SC};if(j++,i.monitorRunDependencies?.(j),i.instantiateWasm)try{return i.instantiateWasm(g,I)}catch(A){q(`Module.instantiateWasm callback failed with error: ${A}`),B(A);}return $g(g,function(A){I(A.instance);}).catch(B),{}}(),xI=I=>(xI=Y.fa)(I),Jg=I=>(Jg=Y.ga)(I),E=I=>(E=Y.ia)(I),F=(I,g)=>(F=Y.ja)(I,g),L=I=>(L=Y.ka)(I),N=()=>(N=Y.la)();i.dynCall_iijj=(I,g,A,e,t,o)=>(i.dynCall_iijj=Y.na)(I,g,A,e,t,o),i.dynCall_vijj=(I,g,A,e,t,o)=>(i.dynCall_vijj=Y.oa)(I,g,A,e,t,o),i.dynCall_jiii=(I,g,A,e)=>(i.dynCall_jiii=Y.pa)(I,g,A,e),i.dynCall_jii=(I,g,A)=>(i.dynCall_jii=Y.qa)(I,g,A);var fg=i.dynCall_viiij=(I,g,A,e,t,o)=>(fg=i.dynCall_viiij=Y.ra)(I,g,A,e,t,o);i.dynCall_jiji=(I,g,A,e,t)=>(i.dynCall_jiji=Y.sa)(I,g,A,e,t),i.dynCall_viijii=(I,g,A,e,t,o,l)=>(i.dynCall_viijii=Y.ta)(I,g,A,e,t,o,l),i.dynCall_iiiiij=(I,g,A,e,t,o,l)=>(i.dynCall_iiiiij=Y.ua)(I,g,A,e,t,o,l),i.dynCall_iiiiijj=(I,g,A,e,t,o,l,a,c)=>(i.dynCall_iiiiijj=Y.va)(I,g,A,e,t,o,l,a,c),i.dynCall_iiiiiijj=(I,g,A,e,t,o,l,a,c,s)=>(i.dynCall_iiiiiijj=Y.wa)(I,g,A,e,t,o,l,a,c,s);function VC(I,g){var A=N();try{H.get(I)(g);}catch(e){if(L(A),e!==e+0)throw e;F(1,0);}}function wC(I,g,A){var e=N();try{H.get(I)(g,A);}catch(t){if(L(e),t!==t+0)throw t;F(1,0);}}function RC(I,g,A,e){var t=N();try{return H.get(I)(g,A,e)}catch(o){if(L(t),o!==o+0)throw o;F(1,0);}}function XC(I,g,A){var e=N();try{return H.get(I)(g,A)}catch(t){if(L(e),t!==t+0)throw t;F(1,0);}}function HC(I,g){var A=N();try{return H.get(I)(g)}catch(e){if(L(A),e!==e+0)throw e;F(1,0);}}function vC(I,g,A,e,t,o){var l=N();try{return H.get(I)(g,A,e,t,o)}catch(a){if(L(l),a!==a+0)throw a;F(1,0);}}function kC(I,g,A,e,t){var o=N();try{H.get(I)(g,A,e,t);}catch(l){if(L(o),l!==l+0)throw l;F(1,0);}}function FC(I,g,A,e){var t=N();try{H.get(I)(g,A,e);}catch(o){if(L(t),o!==o+0)throw o;F(1,0);}}function LC(I){var g=N();try{H.get(I)();}catch(A){if(L(g),A!==A+0)throw A;F(1,0);}}function NC(I,g,A,e,t,o){var l=N();try{fg(I,g,A,e,t,o);}catch(a){if(L(l),a!==a+0)throw a;F(1,0);}}var SI;tI=function I(){SI||Tg(),SI||(tI=I);};function Tg(){function I(){if(!SI&&(SI=!0,i.calledRun=!0,!og)){if(HI(dg),d(i),i.onRuntimeInitialized&&i.onRuntimeInitialized(),i.postRun)for(typeof i.postRun=="function"&&(i.postRun=[i.postRun]);i.postRun.length;){var g=i.postRun.shift();cg.unshift(g);}HI(cg);}}if(!(0<j)){if(i.preRun)for(typeof i.preRun=="function"&&(i.preRun=[i.preRun]);i.preRun.length;)Og();HI(sg),0<j||(i.setStatus?(i.setStatus("Running..."),setTimeout(function(){setTimeout(function(){i.setStatus("");},1),I();},1)):I());}}if(i.preInit)for(typeof i.preInit=="function"&&(i.preInit=[i.preInit]);0<i.preInit.length;)i.preInit.pop()();return Tg(),f}})(),Mg=TC;var _=class{constructor(){throw new Error("RendererLoader is a static class and cannot be instantiated.")}static async _tryLoad(C){return await Mg({locateFile:()=>C})}static async _loadWithBackup(){return this._ModulePromise||(this._ModulePromise=this._tryLoad(this._wasmURL).catch(async C=>{let i=`https://web.archive.org/web/20240829092239/https://unpkg.com/${Ig}@${qI}/dist/dotlottie-player.wasm`;console.warn(`Primary WASM load failed from ${this._wasmURL}. Error: ${C.message}`),console.warn(`Attempting to load WASM from backup URL: ${i}`);try{return await this._tryLoad(i)}catch(d){throw console.error(`Primary WASM URL failed: ${C.message}`),console.error(`Backup WASM URL failed: ${d.message}`),new Error("WASM loading failed from all sources.")}})),this._ModulePromise}static async load(){return this._loadWithBackup()}static setWasmUrl(C){this._wasmURL=C,this._ModulePromise=null;}};Z(_,"_ModulePromise",null),Z(_,"_wasmURL",`https://web.archive.org/web/20240829092239/https://cdn.jsdelivr.net/npm/${Ig}@${qI}/dist/dotlottie-player.wasm`);var AI=class{constructor(){Z(this,"_eventListeners",new Map);}addEventListener(C,i){let d=this._eventListeners.get(C);d||(d=new Set,this._eventListeners.set(C,d)),d.add(i);}removeEventListener(C,i){let d=this._eventListeners.get(C);d&&(i?(d.delete(i),d.size===0&&this._eventListeners.delete(C)):this._eventListeners.delete(C));}dispatch(C){this._eventListeners.get(C.type)?.forEach(d=>d(C));}removeAllEventListeners(){this._eventListeners.clear();}};function DC(r){return /^#([\da-f]{6}|[\da-f]{8})$/iu.test(r)}function Ug(r){if(!DC(r))return 0;let C=r.replace("#","");return C=C.length===6?`${C}ff`:C,parseInt(C,16)}function gg(r){if(r.byteLength<4)return !1;let C=new Uint8Array(r.slice(0,wI.byteLength));for(let i=0;i<wI.length;i+=1)if(wI[i]!==C[i])return !1;return !0}function Pg(r){return Eg.every(C=>Object.prototype.hasOwnProperty.call(r,C))}function Cg(r){if(typeof r=="string")try{return Pg(JSON.parse(r))}catch{return !1}else return Pg(r)}var Ag=(r,C)=>r==="reverse"?C.Mode.Reverse:r==="bounce"?C.Mode.Bounce:r==="reverse-bounce"?C.Mode.ReverseBounce:C.Mode.Forward,ig=(r,C)=>r==="contain"?C.Fit.Contain:r==="cover"?C.Fit.Cover:r==="fill"?C.Fit.Fill:r==="fit-height"?C.Fit.FitHeight:r==="fit-width"?C.Fit.FitWidth:C.Fit.None,eg=(r,C)=>{let i=new C.VectorFloat;return i.push_back(r[0]),i.push_back(r[1]),i},tg=(r,C)=>{let i=new C.VectorFloat;return r.length!==2||(i.push_back(r[0]),i.push_back(r[1])),i},W=class W{constructor(C){Z(this,"_canvas");Z(this,"_context",null);Z(this,"_eventManager");Z(this,"_animationFrameId",null);Z(this,"_frameManager");Z(this,"_dotLottieCore",null);Z(this,"_renderConfig",{});Z(this,"_isFrozen",!1);Z(this,"_backgroundColor",null);Z(this,"_pointerUpMethod");Z(this,"_pointerDownMethod");Z(this,"_pointerMoveMethod");Z(this,"_pointerEnterMethod");Z(this,"_pointerExitMethod");Z(this,"_onCompleteMethod");this._canvas=C.canvas,this._context=this._canvas.getContext("2d"),this._eventManager=new AI,this._frameManager=new VI,this._renderConfig=C.renderConfig??{},_.load().then(i=>{W._wasmModule=i,this._dotLottieCore=new i.DotLottiePlayer({autoplay:C.autoplay??!1,backgroundColor:0,loopAnimation:C.loop??!1,mode:Ag(C.mode??"forward",i),segment:tg(C.segment??[],i),speed:C.speed??1,useFrameInterpolation:C.useFrameInterpolation??!0,marker:C.marker??"",layout:C.layout?{align:eg(C.layout.align,i),fit:ig(C.layout.fit,i)}:i.createDefaultLayout()}),this._eventManager.dispatch({type:"ready"}),C.data?this._loadFromData(C.data):C.src&&this._loadFromSrc(C.src),C.backgroundColor&&this.setBackgroundColor(C.backgroundColor);}).catch(i=>{this._eventManager.dispatch({type:"loadError",error:new Error(`Failed to load wasm module: ${i}`)});}),this._pointerUpMethod=this._onPointerUp.bind(this),this._pointerDownMethod=this._onPointerDown.bind(this),this._pointerMoveMethod=this._onPointerMove.bind(this),this._pointerEnterMethod=this._onPointerEnter.bind(this),this._pointerExitMethod=this._onPointerLeave.bind(this),this._onCompleteMethod=this._onComplete.bind(this);}_dispatchError(C){console.error(C),this._eventManager.dispatch({type:"loadError",error:new Error(C)});}async _fetchData(C){let i=await fetch(C);if(!i.ok)throw new Error(`Failed to fetch animation data from URL: ${C}. ${i.status}: ${i.statusText}`);let d=await i.arrayBuffer();return gg(d)?d:new TextDecoder().decode(d)}_loadFromData(C){if(this._dotLottieCore===null)return;let i=this._canvas.width,d=this._canvas.height,B=!1;if(typeof C=="string"){if(!Cg(C)){this._dispatchError("Invalid Lottie JSON string: The provided string does not conform to the Lottie JSON format.");return}B=this._dotLottieCore.loadAnimationData(C,i,d);}else if(C instanceof ArrayBuffer){if(!gg(C)){this._dispatchError("Invalid dotLottie ArrayBuffer: The provided ArrayBuffer does not conform to the dotLottie format.");return}B=this._dotLottieCore.loadDotLottieData(C,i,d);}else if(typeof C=="object"){if(!Cg(C)){this._dispatchError("Invalid Lottie JSON object: The provided object does not conform to the Lottie JSON format.");return}B=this._dotLottieCore.loadAnimationData(JSON.stringify(C),i,d);}else {this._dispatchError(`Unsupported data type for animation data. Expected: 
          - string (Lottie JSON),
          - ArrayBuffer (dotLottie),
          - object (Lottie JSON). 
          Received: ${typeof C}`);return}B?(this._eventManager.dispatch({type:"load"}),M&&this.resize(),this._eventManager.dispatch({type:"frame",currentFrame:this._dotLottieCore.currentFrame()}),this._render(),this._dotLottieCore.config().autoplay&&(this._dotLottieCore.play(),this._dotLottieCore.isPlaying()?(this._eventManager.dispatch({type:"play"}),this._animationFrameId=this._frameManager.requestAnimationFrame(this._draw.bind(this))):console.error("something went wrong, the animation was suppose to autoplay"))):this._dispatchError("Failed to load animation data");}_loadFromSrc(C){this._fetchData(C).then(i=>this._loadFromData(i)).catch(i=>this._dispatchError(`Failed to load animation data from URL: ${C}. ${i}`));}get activeAnimationId(){return this._dotLottieCore?.activeAnimationId()}get activeThemeId(){return this._dotLottieCore?.activeThemeId()}get layout(){let C=this._dotLottieCore?.config().layout;if(C)return {align:[C.align.get(0),C.align.get(1)],fit:(()=>{switch(C.fit){case W._wasmModule?.Fit.Contain:return "contain";case W._wasmModule?.Fit.Cover:return "cover";case W._wasmModule?.Fit.Fill:return "fill";case W._wasmModule?.Fit.FitHeight:return "fit-height";case W._wasmModule?.Fit.FitWidth:return "fit-width";case W._wasmModule?.Fit.None:return "none";default:return "contain"}})()}}get marker(){return this._dotLottieCore?.config().marker}get manifest(){try{let C=this._dotLottieCore?.manifestString();if(this._dotLottieCore===null||!C)return null;let i=JSON.parse(C);return Object.keys(i).length===0?null:i}catch{return null}}get renderConfig(){return this._renderConfig}get segment(){let C=this._dotLottieCore?.config().segment;if(C&&C.size()===2)return [C.get(0),C.get(1)]}get loop(){return this._dotLottieCore?.config().loopAnimation??!1}get mode(){let C=this._dotLottieCore?.config().mode;return C===W._wasmModule?.Mode.Reverse?"reverse":C===W._wasmModule?.Mode.Bounce?"bounce":C===W._wasmModule?.Mode.ReverseBounce?"reverse-bounce":"forward"}get isFrozen(){return this._isFrozen}get backgroundColor(){return this._backgroundColor??""}get autoplay(){return this._dotLottieCore?.config().autoplay??!1}get useFrameInterpolation(){return this._dotLottieCore?.config().useFrameInterpolation??!1}get speed(){return this._dotLottieCore?.config().speed??0}get isReady(){return this._dotLottieCore!==null}get isLoaded(){return this._dotLottieCore?.isLoaded()??!1}get isPlaying(){return this._dotLottieCore?.isPlaying()??!1}get isPaused(){return this._dotLottieCore?.isPaused()??!1}get isStopped(){return this._dotLottieCore?.isStopped()??!1}get currentFrame(){return this._dotLottieCore?.currentFrame()??0}get loopCount(){return this._dotLottieCore?.loopCount()??0}get totalFrames(){return this._dotLottieCore?.totalFrames()??0}get duration(){return this._dotLottieCore?.duration()??0}get segmentDuration(){return this._dotLottieCore?.segmentDuration()??0}get canvas(){return this._canvas}load(C){this._dotLottieCore===null||W._wasmModule===null||(this._dotLottieCore.setConfig({autoplay:C.autoplay??!1,backgroundColor:0,loopAnimation:C.loop??!1,mode:Ag(C.mode??"forward",W._wasmModule),segment:tg(C.segment??[],W._wasmModule),speed:C.speed??1,useFrameInterpolation:C.useFrameInterpolation??!0,marker:C.marker??"",layout:C.layout?{align:eg(C.layout.align,W._wasmModule),fit:ig(C.layout.fit,W._wasmModule)}:W._wasmModule.createDefaultLayout()}),C.data?this._loadFromData(C.data):C.src&&this._loadFromSrc(C.src),this.setBackgroundColor(C.backgroundColor??""));}_render(){if(this._dotLottieCore===null||this._context===null)return !1;if(this._dotLottieCore.render()){let i=this._dotLottieCore.buffer(),d=new Uint8ClampedArray(i,0,this._canvas.width*this._canvas.height*4),B=null;return typeof ImageData>"u"?(B=this._context.createImageData(this._canvas.width,this._canvas.height),B.data.set(d)):B=new ImageData(d,this._canvas.width,this._canvas.height),this._context.putImageData(B,0,0),this._eventManager.dispatch({type:"render",currentFrame:this._dotLottieCore.currentFrame()}),!0}return !1}_draw(){if(this._dotLottieCore===null||this._context===null||!this._dotLottieCore.isPlaying())return;let C=this._dotLottieCore.requestFrame();this._dotLottieCore.setFrame(C)&&(this._eventManager.dispatch({type:"frame",currentFrame:this._dotLottieCore.currentFrame()}),this._render()&&this._dotLottieCore.isComplete()&&(this._dotLottieCore.config().loopAnimation?this._eventManager.dispatch({type:"loop",loopCount:this._dotLottieCore.loopCount()}):this._eventManager.dispatch({type:"complete"}))),this._animationFrameId=this._frameManager.requestAnimationFrame(this._draw.bind(this));}play(){if(this._dotLottieCore===null)return;(this._dotLottieCore.play()||this._dotLottieCore.isPlaying())&&(this._isFrozen=!1,this._eventManager.dispatch({type:"play"}),this._animationFrameId=this._frameManager.requestAnimationFrame(this._draw.bind(this)));}pause(){if(this._dotLottieCore===null)return;(this._dotLottieCore.pause()||this._dotLottieCore.isPaused())&&this._eventManager.dispatch({type:"pause"});}stop(){if(this._dotLottieCore===null)return;this._dotLottieCore.stop()&&(this._eventManager.dispatch({type:"frame",currentFrame:this._dotLottieCore.currentFrame()}),this._render(),this._eventManager.dispatch({type:"stop"}));}setFrame(C){if(this._dotLottieCore===null||C<0||C>this._dotLottieCore.totalFrames())return;this._dotLottieCore.seek(C)&&(this._eventManager.dispatch({type:"frame",currentFrame:this._dotLottieCore.currentFrame()}),this._render());}setSpeed(C){this._dotLottieCore!==null&&this._dotLottieCore.setConfig({...this._dotLottieCore.config(),speed:C});}setBackgroundColor(C){this._dotLottieCore!==null&&(M&&this._canvas instanceof HTMLCanvasElement?this._canvas.style.backgroundColor=C:this._dotLottieCore.setConfig({...this._dotLottieCore.config(),backgroundColor:Ug(C)}),this._backgroundColor=C);}setLoop(C){this._dotLottieCore!==null&&this._dotLottieCore.setConfig({...this._dotLottieCore.config(),loopAnimation:C});}setUseFrameInterpolation(C){this._dotLottieCore!==null&&this._dotLottieCore.setConfig({...this._dotLottieCore.config(),useFrameInterpolation:C});}addEventListener(C,i){this._eventManager.addEventListener(C,i);}removeEventListener(C,i){this._eventManager.removeEventListener(C,i);}destroy(){this._dotLottieCore?.delete(),this._dotLottieCore=null,this._context=null,this._eventManager.dispatch({type:"destroy"}),this._eventManager.removeAllEventListeners(),this._cleanupStateMachineListeners();}freeze(){this._animationFrameId!==null&&(this._frameManager.cancelAnimationFrame(this._animationFrameId),this._animationFrameId=null,this._isFrozen=!0,this._eventManager.dispatch({type:"freeze"}));}unfreeze(){this._animationFrameId===null&&(this._animationFrameId=this._frameManager.requestAnimationFrame(this._draw.bind(this)),this._isFrozen=!1,this._eventManager.dispatch({type:"unfreeze"}));}resize(){if(M&&this._canvas instanceof HTMLCanvasElement){let i=this._renderConfig.devicePixelRatio||window.devicePixelRatio||1,{height:d,width:B}=this._canvas.getBoundingClientRect();this._canvas.width=B*i,this._canvas.height=d*i;}this._dotLottieCore?.resize(this._canvas.width,this._canvas.height)&&this._render();}setSegment(C,i){this._dotLottieCore===null||W._wasmModule===null||this._dotLottieCore.setConfig({...this._dotLottieCore.config(),segment:tg([C,i],W._wasmModule)});}setMode(C){this._dotLottieCore===null||W._wasmModule===null||this._dotLottieCore.setConfig({...this._dotLottieCore.config(),mode:Ag(C,W._wasmModule)});}setRenderConfig(C){this._renderConfig=C;}loadAnimation(C){if(this._dotLottieCore===null||this._dotLottieCore.activeAnimationId()===C)return;this._dotLottieCore.loadAnimation(C,this._canvas.width,this._canvas.height)?(this._eventManager.dispatch({type:"load"}),this.resize()):this._eventManager.dispatch({type:"loadError",error:new Error(`Failed to animation :${C}`)});}setMarker(C){this._dotLottieCore!==null&&this._dotLottieCore.setConfig({...this._dotLottieCore.config(),marker:C});}markers(){let C=this._dotLottieCore?.markers();if(C){let i=[];for(let d=0;d<C.size();d+=1){let B=C.get(d);i.push({name:B.name,time:B.time,duration:B.duration});}return i}return []}loadTheme(C){if(this._dotLottieCore===null)return !1;let i=this._dotLottieCore.loadTheme(C);return this._render(),i}loadThemeData(C){if(this._dotLottieCore===null)return !1;let i=this._dotLottieCore.loadThemeData(C);return this._render(),i}setLayout(C){this._dotLottieCore===null||W._wasmModule===null||this._dotLottieCore.setConfig({...this._dotLottieCore.config(),layout:{align:eg(C.align,W._wasmModule),fit:ig(C.fit,W._wasmModule)}});}setViewport(C,i,d,B){return this._dotLottieCore===null?!1:this._dotLottieCore.setViewport(C,i,d,B)}static setWasmUrl(C){_.setWasmUrl(C);}loadStateMachine(C){return this._dotLottieCore?.loadStateMachine(C)??!1}startStateMachine(){let C=this._dotLottieCore?.startStateMachine()??!1;return C&&this._setupStateMachineListeners(),C}stopStateMachine(){let C=this._dotLottieCore?.stopStateMachine()??!1;return C&&this._cleanupStateMachineListeners(),C}_getPointerPosition(C){let i=this._canvas.getBoundingClientRect(),d=this._canvas.width/i.width,B=this._canvas.height/i.height,f=this._renderConfig.devicePixelRatio||window.devicePixelRatio||1,P=(C.clientX-i.left)*d/f,T=(C.clientY-i.top)*B/f;return {x:P,y:T}}_onPointerUp(C){let{x:i,y:d}=this._getPointerPosition(C);this.postStateMachineEvent(`OnPointerUp: ${i} ${d}`);}_onPointerDown(C){let{x:i,y:d}=this._getPointerPosition(C);this.postStateMachineEvent(`OnPointerDown: ${i} ${d}`);}_onPointerMove(C){let{x:i,y:d}=this._getPointerPosition(C);this.postStateMachineEvent(`OnPointerMove: ${i} ${d}`);}_onPointerEnter(C){let{x:i,y:d}=this._getPointerPosition(C);this.postStateMachineEvent(`OnPointerEnter: ${i} ${d}`);}_onPointerLeave(C){let{x:i,y:d}=this._getPointerPosition(C);this.postStateMachineEvent(`OnPointerExit: ${i} ${d}`);}_onComplete(){this.postStateMachineEvent("OnComplete");}postStateMachineEvent(C){let i=this._dotLottieCore?.postEventPayload(C)??1;return i===2?this.play():i===3?this.pause():i===4&&this._render(),i}getStateMachineListeners(){if(!this._dotLottieCore)return [];let C=this._dotLottieCore.stateMachineFrameworkSetup(),i=[];for(let d=0;d<C.size();d+=1)i.push(C.get(d));return i}_setupStateMachineListeners(){if(M&&this._canvas instanceof HTMLCanvasElement&&this._dotLottieCore!==null&&this.isLoaded){let C=this.getStateMachineListeners();C.includes("PointerUp")&&this._canvas.addEventListener("pointerup",this._pointerUpMethod),C.includes("PointerDown")&&this._canvas.addEventListener("pointerdown",this._pointerDownMethod),C.includes("PointerMove")&&this._canvas.addEventListener("pointermove",this._pointerMoveMethod),C.includes("PointerEnter")&&this._canvas.addEventListener("pointerenter",this._pointerEnterMethod),C.includes("PointerExit")&&this._canvas.addEventListener("pointerleave",this._pointerExitMethod),C.includes("Complete")&&this.addEventListener("complete",this._onCompleteMethod);}}_cleanupStateMachineListeners(){M&&this._canvas instanceof HTMLCanvasElement&&(this._canvas.removeEventListener("pointerup",this._pointerUpMethod),this._canvas.removeEventListener("pointerdown",this._pointerDownMethod),this._canvas.removeEventListener("pointermove",this._pointerMoveMethod),this._canvas.removeEventListener("pointerenter",this._pointerEnterMethod),this._canvas.removeEventListener("pointerleave",this._pointerExitMethod),this.removeEventListener("complete",this._onCompleteMethod));}loadStateMachineData(C){return this._dotLottieCore?.loadStateMachineData(C)??!1}animationSize(){let C=this._dotLottieCore?.animationSize().get(0)??0,i=this._dotLottieCore?.animationSize().get(1)??0;return {width:C,height:i}}setStateMachineBooleanContext(C,i){return this._dotLottieCore?.setStateMachineBooleanContext(C,i)??!1}setStateMachineNumericContext(C,i){return this._dotLottieCore?.setStateMachineNumericContext(C,i)??!1}setStateMachineStringContext(C,i){return this._dotLottieCore?.setStateMachineStringContext(C,i)??!1}};Z(W,"_wasmModule",null);var zg=W;var hI=class extends Worker{constructor(){super("data:application/javascript;base64,",{type:"classic"});}};var RI=class{constructor(){Z(this,"_workers",new Map);Z(this,"_animationWorkerMap",new Map);}getWorker(C){return this._workers.has(C)||this._workers.set(C,new hI),this._workers.get(C)}assignAnimationToWorker(C,i){this._animationWorkerMap.set(C,i);}unassignAnimationFromWorker(C){this._animationWorkerMap.delete(C);}sendMessage(C,i,d){this.getWorker(C).postMessage(i,d||[]);}terminateWorker(C){let i=this._workers.get(C);i&&(i.terminate(),this._workers.delete(C));}};function Qg(r){if(r instanceof OffscreenCanvas)return {width:r.width,height:r.height};let{height:C,width:i}=r.getBoundingClientRect();return {width:i*window.devicePixelRatio,height:C*window.devicePixelRatio}}function jg(){return Date.now().toString(36)+Math.random().toString(36).substr(2,9)}var J=class J{constructor(C){Z(this,"_eventManager",new AI);Z(this,"_id");Z(this,"_worker");Z(this,"_canvas");Z(this,"_dotLottieInstanceState",{markers:[],autoplay:!1,backgroundColor:"",currentFrame:0,duration:0,loop:!1,mode:"forward",segment:[0,0],segmentDuration:0,speed:1,totalFrames:0,isLoaded:!1,isPlaying:!1,isPaused:!1,isStopped:!0,isFrozen:!1,useFrameInterpolation:!1,renderConfig:{devicePixelRatio:window.devicePixelRatio},activeAnimationId:"",activeThemeId:"",layout:void 0,marker:void 0,isReady:!1,manifest:null});Z(this,"_created",!1);Z(this,"_pointerUpMethod");Z(this,"_pointerDownMethod");Z(this,"_pointerMoveMethod");Z(this,"_pointerEnterMethod");Z(this,"_pointerExitMethod");Z(this,"_onCompleteMethod");this._canvas=C.canvas,this._id=`dotlottie-${jg()}`;let i=C.workerId||"defaultWorker";this._worker=J._workerManager.getWorker(i),J._workerManager.assignAnimationToWorker(this._id,i),J._wasmUrl&&this._sendMessage("setWasmUrl",{url:J._wasmUrl}),this._create(C),this._worker.addEventListener("message",this._handleWorkerEvent.bind(this)),this._pointerUpMethod=this._onPointerUp.bind(this),this._pointerDownMethod=this._onPointerDown.bind(this),this._pointerMoveMethod=this._onPointerMove.bind(this),this._pointerEnterMethod=this._onPointerEnter.bind(this),this._pointerExitMethod=this._onPointerLeave.bind(this),this._onCompleteMethod=this._onComplete.bind(this);}async _handleWorkerEvent(C){let i=C.data;i.id||(i.method==="onLoad"&&i.result.instanceId===this._id&&(await this._updateDotLottieInstanceState(),this._eventManager.dispatch(i.result.event)),i.method==="onComplete"&&i.result.instanceId===this._id&&(await this._updateDotLottieInstanceState(),this._eventManager.dispatch(i.result.event)),i.method==="onDestroy"&&i.result.instanceId===this._id&&this._eventManager.dispatch(i.result.event),i.method==="onUnfreeze"&&i.result.instanceId===this._id&&(await this._updateDotLottieInstanceState(),this._dotLottieInstanceState.isFrozen=!1,this._eventManager.dispatch(i.result.event)),i.method==="onFrame"&&i.result.instanceId===this._id&&(this._dotLottieInstanceState.currentFrame=i.result.event.currentFrame,this._eventManager.dispatch(i.result.event)),i.method==="onRender"&&i.result.instanceId===this._id&&this._eventManager.dispatch(i.result.event),i.method==="onFreeze"&&i.result.instanceId===this._id&&(await this._updateDotLottieInstanceState(),this._eventManager.dispatch(i.result.event)),i.method==="onPause"&&i.result.instanceId===this._id&&(await this._updateDotLottieInstanceState(),this._eventManager.dispatch(i.result.event)),i.method==="onPlay"&&i.result.instanceId===this._id&&(await this._updateDotLottieInstanceState(),this._eventManager.dispatch(i.result.event)),i.method==="onStop"&&i.result.instanceId===this._id&&(await this._updateDotLottieInstanceState(),this._eventManager.dispatch(i.result.event)),i.method==="onLoadError"&&i.result.instanceId===this._id&&(await this._updateDotLottieInstanceState(),this._eventManager.dispatch(i.result.event)),i.method==="onReady"&&i.result.instanceId===this._id&&(await this._updateDotLottieInstanceState(),this._eventManager.dispatch(i.result.event)));}async _create(C){let i;this._canvas instanceof HTMLCanvasElement?i=this._canvas.transferControlToOffscreen():i=this._canvas;let{instanceId:d}=await this._sendMessage("create",{instanceId:this._id,config:{...C,canvas:i},...Qg(this._canvas)},[i]);if(d!==this._id)throw new Error("Instance ID mismatch");this._created=!0,await this._updateDotLottieInstanceState();}get isLoaded(){return this._dotLottieInstanceState.isLoaded}get isPlaying(){return this._dotLottieInstanceState.isPlaying}get isPaused(){return this._dotLottieInstanceState.isPaused}get isStopped(){return this._dotLottieInstanceState.isStopped}get currentFrame(){return this._dotLottieInstanceState.currentFrame}get isFrozen(){return this._dotLottieInstanceState.isFrozen}get segmentDuration(){return this._dotLottieInstanceState.segmentDuration}get totalFrames(){return this._dotLottieInstanceState.totalFrames}get segment(){return this._dotLottieInstanceState.segment}get speed(){return this._dotLottieInstanceState.speed}get duration(){return this._dotLottieInstanceState.duration}get isReady(){return this._dotLottieInstanceState.isReady}get mode(){return this._dotLottieInstanceState.mode}get canvas(){return this._canvas}get autoplay(){return this._dotLottieInstanceState.autoplay}get backgroundColor(){return this._dotLottieInstanceState.backgroundColor}get loop(){return this._dotLottieInstanceState.loop}get useFrameInterpolation(){return this._dotLottieInstanceState.useFrameInterpolation}get renderConfig(){return this._dotLottieInstanceState.renderConfig}get manifest(){return this._dotLottieInstanceState.manifest}get activeAnimationId(){return this._dotLottieInstanceState.activeAnimationId}get marker(){return this._dotLottieInstanceState.marker}get activeThemeId(){return this._dotLottieInstanceState.activeThemeId}get layout(){return this._dotLottieInstanceState.layout}async play(){this._created&&(await this._sendMessage("play",{instanceId:this._id}),await this._updateDotLottieInstanceState());}async pause(){this._created&&(await this._sendMessage("pause",{instanceId:this._id}),await this._updateDotLottieInstanceState());}async stop(){this._created&&(await this._sendMessage("stop",{instanceId:this._id}),await this._updateDotLottieInstanceState());}async setSpeed(C){this._created&&(await this._sendMessage("setSpeed",{instanceId:this._id,speed:C}),await this._updateDotLottieInstanceState());}async setMode(C){this._created&&(await this._sendMessage("setMode",{instanceId:this._id,mode:C}),await this._updateDotLottieInstanceState());}async setFrame(C){this._created&&(await this._sendMessage("setFrame",{frame:C,instanceId:this._id}),await this._updateDotLottieInstanceState());}async setSegment(C,i){this._created&&(await this._sendMessage("setSegment",{instanceId:this._id,segment:[C,i]}),await this._updateDotLottieInstanceState());}async setRenderConfig(C){this._created&&(await this._sendMessage("setRenderConfig",{instanceId:this._id,renderConfig:C}),await this._updateDotLottieInstanceState());}async setUseFrameInterpolation(C){this._created&&(await this._sendMessage("setUseFrameInterpolation",{instanceId:this._id,useFrameInterpolation:C}),await this._updateDotLottieInstanceState());}async loadTheme(C){if(!this._created)return !1;let i=this._sendMessage("loadTheme",{instanceId:this._id,themeId:C});return await this._updateDotLottieInstanceState(),i}async load(C){this._created&&(await this._sendMessage("load",{config:C,instanceId:this._id}),await this._updateDotLottieInstanceState());}async setLoop(C){this._created&&(await this._sendMessage("setLoop",{instanceId:this._id,loop:C}),await this._updateDotLottieInstanceState());}async resize(){if(!this._created)return;let{height:C,width:i}=Qg(this._canvas);this._canvas.width=i,this._canvas.height=C,await this._sendMessage("resize",{height:C,instanceId:this._id,width:i}),await this._updateDotLottieInstanceState();}async destroy(){this._created&&(this._created=!1,await this._sendMessage("destroy",{instanceId:this._id}),this._cleanupStateMachineListeners(),J._workerManager.unassignAnimationFromWorker(this._id),this._eventManager.removeAllEventListeners());}async freeze(){this._created&&(await this._sendMessage("freeze",{instanceId:this._id}),await this._updateDotLottieInstanceState());}async unfreeze(){this._created&&(await this._sendMessage("unfreeze",{instanceId:this._id}),await this._updateDotLottieInstanceState());}async setBackgroundColor(C){this._created&&(await this._sendMessage("setBackgroundColor",{instanceId:this._id,backgroundColor:C}),await this._updateDotLottieInstanceState());}async loadAnimation(C){this._created&&(await this._sendMessage("loadAnimation",{animationId:C,instanceId:this._id}),await this._updateDotLottieInstanceState());}async setLayout(C){this._created&&(await this._sendMessage("setLayout",{instanceId:this._id,layout:C}),await this._updateDotLottieInstanceState());}async _updateDotLottieInstanceState(){if(!this._created)return;let C=await this._sendMessage("getDotLottieInstanceState",{instanceId:this._id});this._dotLottieInstanceState=C.state;}markers(){return this._dotLottieInstanceState.markers}async setMarker(C){this._created&&(await this._sendMessage("setMarker",{instanceId:this._id,marker:C}),await this._updateDotLottieInstanceState());}async loadThemeData(C){if(!this._created)return !1;let i=await this._sendMessage("loadThemeData",{instanceId:this._id,themeData:C});return await this._updateDotLottieInstanceState(),i}async setViewport(C,i,d,B){return this._created?this._sendMessage("setViewport",{x:C,y:i,width:d,height:B,instanceId:this._id}):!1}async _sendMessage(C,i,d){let B={id:`dotlottie-request-${jg()}`,method:C,params:i};return this._worker.postMessage(B,d||[]),new Promise((f,P)=>{let T=v=>{let $=v.data;$.id===B.id&&(this._worker.removeEventListener("message",T),$.error?P(new Error(`Failed to execute method ${C}: ${$.error}`)):f($.result));};this._worker.addEventListener("message",T);})}addEventListener(C,i){this._eventManager.addEventListener(C,i);}removeEventListener(C,i){this._eventManager.removeEventListener(C,i);}static setWasmUrl(C){J._wasmUrl=C;}async loadStateMachine(C){if(!this._created)return !1;let i=await this._sendMessage("loadStateMachine",{instanceId:this._id,stateMachineId:C});return await this._updateDotLottieInstanceState(),i}async loadStateMachineData(C){if(!this._created)return !1;let i=await this._sendMessage("loadStateMachineData",{instanceId:this._id,stateMachineData:C});return await this._updateDotLottieInstanceState(),i}async startStateMachine(){if(!this._created)return !1;this._setupStateMachineListeners();let C=await this._sendMessage("startStateMachine",{instanceId:this._id});return await this._updateDotLottieInstanceState(),C}async stopStateMachine(){return this._created?(this._cleanupStateMachineListeners(),this._sendMessage("stopStateMachine",{instanceId:this._id})):!1}async postStateMachineEvent(C){return this._created?this._sendMessage("postStateMachineEvent",{event:C,instanceId:this._id}):1}async getStateMachineListeners(){return this._created?this._sendMessage("getStateMachineListeners",{instanceId:this._id}):[]}_getPointerPosition(C){let i=this._canvas.getBoundingClientRect(),d=this._canvas.width/i.width,B=this._canvas.height/i.height,f=this._dotLottieInstanceState.renderConfig.devicePixelRatio||window.devicePixelRatio||1,P=(C.clientX-i.left)*d/f,T=(C.clientY-i.top)*B/f;return {x:P,y:T}}_onPointerUp(C){let{x:i,y:d}=this._getPointerPosition(C);this.postStateMachineEvent(`OnPointerUp: ${i} ${d}`);}_onPointerDown(C){let{x:i,y:d}=this._getPointerPosition(C);this.postStateMachineEvent(`OnPointerDown: ${i} ${d}`);}_onPointerMove(C){let{x:i,y:d}=this._getPointerPosition(C);this.postStateMachineEvent(`OnPointerMove: ${i} ${d}`);}_onPointerEnter(C){let{x:i,y:d}=this._getPointerPosition(C);this.postStateMachineEvent(`OnPointerEnter: ${i} ${d}`);}_onPointerLeave(C){let{x:i,y:d}=this._getPointerPosition(C);this.postStateMachineEvent(`OnPointerExit: ${i} ${d}`);}_onComplete(){this.postStateMachineEvent("OnComplete");}async _setupStateMachineListeners(){if(M&&this._canvas instanceof HTMLCanvasElement&&this.isLoaded){let C=await this._sendMessage("getStateMachineListeners",{instanceId:this._id});C.includes("PointerUp")&&this._canvas.addEventListener("pointerup",this._pointerUpMethod),C.includes("PointerDown")&&this._canvas.addEventListener("pointerdown",this._pointerDownMethod),C.includes("PointerMove")&&this._canvas.addEventListener("pointermove",this._pointerMoveMethod),C.includes("PointerEnter")&&this._canvas.addEventListener("pointerenter",this._pointerEnterMethod),C.includes("PointerExit")&&this._canvas.addEventListener("pointerleave",this._pointerExitMethod),C.includes("Complete")&&this.addEventListener("complete",this._onCompleteMethod);}}_cleanupStateMachineListeners(){M&&this._canvas instanceof HTMLCanvasElement&&(this._canvas.removeEventListener("pointerup",this._pointerUpMethod),this._canvas.removeEventListener("pointerdown",this._pointerDownMethod),this._canvas.removeEventListener("pointermove",this._pointerMoveMethod),this._canvas.removeEventListener("pointerenter",this._pointerEnterMethod),this._canvas.removeEventListener("pointerleave",this._pointerExitMethod),this.removeEventListener("complete",this._onCompleteMethod));}};Z(J,"_workerManager",new RI),Z(J,"_wasmUrl","");var xg=J;

export { zg as DotLottie, xg as DotLottieWorker };
//# sourceMappingURL=index.js.map
//# sourceMappingURL=index.js.map

}
/*
     FILE ARCHIVED ON 09:22:39 Aug 29, 2024 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 09:48:47 Nov 18, 2024.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
*/
/*
playback timings (ms):
  captures_list: 0.568
  exclusion.robots: 0.026
  exclusion.robots.policy: 0.016
  esindex: 0.011
  cdx.remote: 57.435
  LoadShardBlock: 181.066 (3)
  PetaboxLoader3.datanode: 102.588 (5)
  PetaboxLoader3.resolve: 139.488 (2)
  load_resource: 104.595
  loaddict: 45.247
*/